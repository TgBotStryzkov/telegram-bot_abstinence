from telegram import Update, ReplyKeyboardMarkup, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import datetime
import asyncio
import os
import random
import json
import requests
import re
from telegram.ext import Application
import time
import nest_asyncio
from dotenv import load_dotenv
load_dotenv()
nest_asyncio.apply()

# üîí –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cache = {}

groq_keys = os.getenv("GROQ_KEYS", "").split(",")

# üî¢ –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞
groq_key_index = 0

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_user_json(user_id):
    if user_id in user_cache:
        return user_cache[user_id]
    filepath = f"user_data/{user_id}.json"
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {
            "start_date": str(datetime.date.today()),
            "reports": [],
            "username": None
        }
    user_cache[user_id] = data
    return data






# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏ –æ—Ç—á—ë—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é.")

# –ö–æ–º–∞–Ω–¥–∞ /support
async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º: @Mihailstryzkov")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "<b>üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/support ‚Äî –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "‚óè –¥–µ–Ω—å ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n"
        "‚óè –æ—Ç—á—ë—Ç ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç\n"
        "‚óè –∏—Å—Ç–æ—Ä–∏—è ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á—ë—Ç—ã\n"
        "‚óè –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ ‚Äî –í–æ–ø—Ä–æ—Å –∫ –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç!"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')






# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—Ä–∞—Ç—Å—Ç–≤–∞
def load_bro_messages():
    path = "bro_messages.json"
    if not os.path.exists(path):
        return []

    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().strip()
            return json.loads(content) if content else []
    except json.JSONDecodeError:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ bro_messages.json")
        return []

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—Ä–∞—Ç—Å—Ç–≤–∞
def save_bro_message(text: str):
    messages = load_bro_messages()
    messages.append(text)
    with open("bro_messages.json", "w", encoding="utf-8") as f:
        json.dump(messages, f, ensure_ascii=False, indent=2)

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_json(user_id: int, data: dict):
    user_cache[user_id] = data  # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    os.makedirs("user_data", exist_ok=True)  # —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    filepath = f"user_data/{user_id}.json"
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞
def autosave_all_users():
    for user_id, data in user_cache.items():
        save_user_json(user_id, data)
    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")







# üì≤ –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username  # ‚Üê –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_user_json(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º username, –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if username and data.get("username") != username:
        data["username"] = username
        save_user_json(user_id, data)

    # –ö—ç—à–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
    user_cache[user_id] = data  # üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: user_data ‚Üí user_cache

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = [
        ["–î–µ–Ω—å", "–°–±—Ä–æ—Å"],
        ["–û—Ç—á—ë—Ç", "–ò—Å—Ç–æ—Ä–∏—è"],
        ["–°–æ—Ä–≤–∞—Ç—å—Å—è —Ö–æ—á—É", "–ü–∏—Å—å–º–æ –±—Ä–∞—Ç—É"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        f"üëä –ü—Ä–∏–≤–µ—Ç, @{username if username else '–¥—Ä—É–≥'}! –Ø —Ç–≤–æ–π –∞–Ω—Ç–∏—Å–ª–∏–≤-–±–æ—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=markup
    )

# üí¨ –†–∞–Ω–¥–æ–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
support_phrases = [
    "üõë –°–¥–µ–ª–∞–π –ø–∞—É–∑—É. –î—ã—à–∏. –¢—ã –Ω–µ –æ–±—è–∑–∞–Ω —Å–ª–∏–≤–∞—Ç—å—Å—è.",
    "üî• –ò–º–ø—É–ª—å—Å ‚Äî —ç—Ç–æ –≤–æ–ª–Ω–∞. –ü–µ—Ä–µ–∂–¥–∏. –¢—ã —Å–∏–ª—å–Ω–µ–µ.",
    "üí™ –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å: 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π, —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞, –≤—ã—Ö–æ–¥ –Ω–∞ —É–ª–∏—Ü—É.",
    "üß† –°—Ä—ã–≤ –Ω–µ –¥–∞—ë—Ç –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –≤–∏–Ω—ã. –ü–æ–±–µ–¥–∞ ‚Äî –¥–∞—ë—Ç —Å–∏–ª—É.",
    "üéØ –¢—ã —É–∂–µ –Ω–∞ –ø—É—Ç–∏. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∫–∞–∫ –º–µ—á –≤ –Ω–æ–∂–Ω–∞—Ö. –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–π –µ–≥–æ.",
    "üöø –ü—Ä–∏–º–∏ –¥—É—à. –ü—Ä–æ–≥—É–ª—è–π—Å—è. –ù–∞–ø–∏—à–∏ –º–Ω–µ –æ—Ç—á—ë—Ç –≤–º–µ—Å—Ç–æ —Å–ª–∏–≤–∞.",
    "üîÅ –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Ç—É–¥–∞, –æ—Ç–∫—É–¥–∞ —Ç–∞–∫ —Ç—è–∂–µ–ª–æ –≤—ã–ª–µ–∑–∞–ª.",
    "üõë –°—Ç–æ–ø. –¢—ã –Ω–∞ –≥—Ä–∞–Ω–∏, –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n\nüîπ –°–¥–µ–ª–∞–π 5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤\nüîπ 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏–ª–∏ 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π\nüîπ –í—ã–ø–µ–π –≤–æ–¥—ã –∏ –≤—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É\n\n–¢—ã —Å–∏–ª—å–Ω–µ–µ —ç—Ç–æ–≥–æ –∏–º–ø—É–ª—å—Å–∞. –Ø —Å —Ç–æ–±–æ–π. –ù–µ —Å–¥–∞–≤–∞–π—Å—è üí™"
]

async def users_count(update: Update, context: ContextTypes.DEFAULT_TYPE):

    folder = "user_data"
    if not os.path.exists(folder):
        await update.message.reply_text("‚ùå –ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º.")
        return

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ .json –≤ –ø–∞–ø–∫–µ
    total = len([f for f in os.listdir(folder) if f.endswith(".json")])
    await update.message.reply_text(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")







# üó£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip().lower()
    user_id = update.effective_user.id

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_user_json(user_id)

    # –ö–æ–º–∞–Ω–¥–∞: –î–µ–Ω—å
    if msg == "–¥–µ–Ω—å":
        start = datetime.date.fromisoformat(data["start_date"])
        days = (datetime.date.today() - start).days
        await update.message.reply_text(f"üìÖ –¢—ã —É–∂–µ –¥–µ—Ä–∂–∏—à—å—Å—è {days} –¥–Ω–µ–π!")

    # –ö–æ–º–∞–Ω–¥–∞: –°–±—Ä–æ—Å
    elif msg == "—Å–±—Ä–æ—Å":
        data["start_date"] = str(datetime.date.today())
        save_user_json(user_id, data)
        await update.message.reply_text("üîÅ –î–µ–Ω—å –æ–±–Ω—É–ª—ë–Ω. –ù–∞—á–Ω–∏ —Å –Ω–æ–≤–æ–π —Å–∏–ª—ã!")

    # –ö–æ–º–∞–Ω–¥–∞: –û—Ç—á—ë—Ç
    elif msg == "–æ—Ç—á—ë—Ç":
        await update.message.reply_text("üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è. –Ø –∑–∞–ø–∏—à—É.")
        context.user_data["awaiting_report"] = True

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –æ—Ç—á—ë—Ç
    elif context.user_data.get("awaiting_report"):
        today = str(datetime.date.today())
        report_text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(report_text) > 333:
            await update.message.reply_text("‚ùóÔ∏è–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á—ë—Ç. –ú–∞–∫—Å–∏–º—É–º ‚Äî 333 —Å–∏–º–≤–æ–ª–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        data.setdefault("reports", []).append(f"{today}: {report_text}")
        save_user_json(user_id, data)

        await update.message.reply_text("‚úÖ –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–π –æ—Ç—á—ë—Ç. –ì–æ—Ä–¥ —Ç–æ–±–æ–π.")
        context.user_data["awaiting_report"] = False








    elif msg == "–∏—Å—Ç–æ—Ä–∏—è":
        data = load_user_json(user_id)
        reports = data.get("reports", [])

        if reports:
            last = reports[-3:] if len(reports) > 3 else reports

            formatted = []
            for r in last:
                if isinstance(r, dict):
                    text = f"üìÖ {r.get('–¥–∞—Ç–∞', '???')} ‚Äî {r.get('–æ—Ç—á—ë—Ç', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')}"
                else:
                    text = str(r)  # –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                formatted.append(text)

            reply_text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á—ë—Ç—ã:\n\n" + "\n".join(formatted)
            await update.message.reply_text(reply_text)
        else:
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.")

    elif msg == "—Å–æ—Ä–≤–∞—Ç—å—Å—è —Ö–æ—á—É":
        support = random.choice(support_phrases)  # –≤—ã–±–∏—Ä–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É
        bros = load_bro_messages()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        letter = f"\n\nüì® –ü–∏—Å—å–º–æ –æ—Ç –±—Ä–∞—Ç–∞:\n‚Äú{random.choice(bros)}‚Äù" if bros else ""  # –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–∏—Å—å–º–∞ –µ—Å—Ç—å
        await update.message.reply_text(support + letter)

    elif msg == "–ø–∏—Å—å–º–æ –±—Ä–∞—Ç—É":
        await update.message.reply_text(
            "üíå –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –º—É–∂—á–∏–Ω—ã. –û–Ω–æ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç—Ä—É–¥–Ω—ã–π –º–æ–º–µ–Ω—Ç."
        )
        context.user_data["writing_bro_letter"] = True

    elif context.user_data.get("writing_bro_letter"):
        save_bro_message(update.message.text)
        await update.message.reply_text(
            "‚úÖ –¢–≤–æ—ë –ø–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç –∫–æ–≥–æ-—Ç–æ –≤ —Ç—Ä—É–¥–Ω—ã–π –º–æ–º–µ–Ω—Ç. –°–ø–∞—Å–∏–±–æ üôè")
        context.user_data["writing_bro_letter"] = False



    else:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = load_user_json(user_id)
        last_time = data.get("last_ai_request")
        now = time.time()

        # ‚è≥ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
        if last_time and now - last_time < 10:
            wait = int(10 - (now - last_time))
            await update.message.reply_text(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {wait} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.")
            return

        await update.message.reply_text("ü§ñ –î—É–º–∞—é...")

        try:
            headers = {
                "Authorization": f"Bearer {os.getenv('TOGETHER_API_KEY')}",
                "Content-Type": "application/json"
            }

            payload = {
                "model": "meta-llama/Llama-3.3-70B-Instruct-Turbo",
                "messages": [
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –º—É–∂—á–∏–Ω. –û–±—â–∞–π—Å—è –∫–∞–∫ –î—ç–≤–∏–¥ –ì–æ–≥–≥–∏–Ω—Å ‚Äî —Å—Ç—Ä–æ–≥–æ, –º—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ –¥–µ–ª—É. "
                            "–û—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ-—Ä—É—Å—Å–∫–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –ª–∞—Ç–∏–Ω–∏—Ü—É, –∞—Ä–∞–±—Å–∫–∏–µ –∏–ª–∏ –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. "
                            "–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π, —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. "
                            "–ì–æ–≤–æ—Ä–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ, —Å–æ–±–ª—é–¥–∞—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ–≤ –∏ –ø–∞–¥–µ–∂–∏. –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π –º—ã—Å–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî –Ω–µ –æ–±—Ä—ã–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
                            "–°–ª–æ–≤–∞ –≤—Ä–æ–¥–µ '—á—Ç–æ-—Ç–æ', '–≥–¥–µ-—Ç–æ', '–∫–æ–≥–¥–∞-—Ç–æ', '–∫—Ç–æ-—Ç–æ' –≤—Å–µ–≥–¥–∞ –ø–∏—à–∏ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ '—á—Ç–æ—Ç–æ', '–≥–¥–µ—Ç–æ'. "
                            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤—å —Ç–æ—á–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—é–∑–∞."
                        )
                    },
                    {"role": "user", "content": msg}
                ]
            }

            response = requests.post(
                "https://api.together.xyz/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=20
            )

            if response.status_code != 200:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Together.ai:\n{response.text}")
                return

            reply = response.json()["choices"][0]["message"]["content"]

            # ‚úÇÔ∏è –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É, –∑–∞–≤–µ—Ä—à–∏–≤ –ø–æ –∑–Ω–∞–∫—É –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            max_chars = 900
            if len(reply) > max_chars:
                end = max(
                    reply.rfind(".", 0, max_chars),
                    reply.rfind("?", 0, max_chars),
                    reply.rfind("!", 0, max_chars)
                )
                reply = reply[:end + 1] if end != -1 else reply[:max_chars]

            # üßº –û—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            reply = re.sub(r'[a-zA-Z]', '', reply)
            reply = re.sub(r'[‚∫Ä-Èøø‰∏Ä-ÈæØ„ÅÅ-„Çî„Ç°-„É¥„Éº„ÄÖ„ÄÜ„Ä§]', '', reply)
            reply = re.sub(r'[^\u0400-\u04FF0-9.,!?‚Äî‚Äì\s\n]', '', reply)
            reply = re.sub(r'\s{2,}', ' ', reply).strip()

            # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
            data["last_ai_request"] = now
            save_user_json(user_id, data)

            await update.message.reply_text(reply)

        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Together.ai.")
            print("–û—à–∏–±–∫–∞:", e)


# ‚è∞ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def morning_message(app: Application) -> None:
    for user_id, data in user_cache.items():
        try:
            start_date = datetime.date.fromisoformat(data["start_date"])
            days = (datetime.date.today() - start_date).days
            await app.bot.send_message(
                chat_id=user_id,
                text=f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–µ–Ω—å {days}. –¢—ã –≤ –∏–≥—Ä–µ. –ù–µ —Å–¥–∞–≤–∞–π—Å—è üí™"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# üåô –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def evening_message(app: Application) -> None:
    for user_id in user_cache:
        try:
            await app.bot.send_message(
                chat_id=user_id,
                text="üåô –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏. –ù–∞–ø–∏—à–∏ –æ—Ç—á—ë—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ–Ω—å –±—ã–ª —Ç—è–∂—ë–ª—ã–º. –¢—ã —Ä–∞—Å—Ç—ë—à—å!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")







# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:
# from your_module import start, help_command, support, handle_text, morning_message, evening_message, autosave_all_users

async def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–æ–º–∞–Ω–¥
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("support", "–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    ])

    # –£–¥–∞–ª–µ–Ω–∏–µ webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    await app.bot.delete_webhook(drop_pending_updates=True)

    # –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("support", support))
    app.add_handler(CommandHandler("users", users_count))

    # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (—É—Ç—Ä–æ, –≤–µ—á–µ—Ä, –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(morning_message, CronTrigger(hour=9, minute=0), args=[app])
    scheduler.add_job(evening_message, CronTrigger(hour=21, minute=0), args=[app])
    scheduler.add_job(autosave_all_users, CronTrigger(minute="*/3"))
    scheduler.start()



    # –ó–∞–ø—É—Å–∫ polling'–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)
    await app.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    asyncio.run(main())
